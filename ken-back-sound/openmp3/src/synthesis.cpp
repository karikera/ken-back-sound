#include "synthesis.h"

#include "types.h"
#include "tables.h"




//
//impl

namespace OpenMP3
{

	void IMDCT_Win(UInt blocktype, const Float32 in[18], Float32 out[36]);


	extern const Float32 kCS[8];

	extern const Float32 kCa[8];

	extern const Float32 kSynthDtbl[512];

}

void OpenMP3::Antialias(FrameData::Granule & granule)
{
	auto & is = granule.is;

	bool window_switching = granule.window_switching;

	bool block_type_2 = granule.block_type == 2;

	bool mixed_block = granule.mixed_block;


	// No antialiasing is done for short blocks
	if (window_switching && block_type_2 && !mixed_block) return;

	// Setup the limit for how many subbands to transform
	UInt sblim = (window_switching && block_type_2 && mixed_block) ? 2 : 32;

	for (UInt sb = 1; sb < sblim; sb++)
	{
		for (UInt i = 0; i < 8; i++)
		{
			UInt li = 18 * sb - 1 - i;

			UInt ui = 18 * sb + i;

			Float32 cs = kCS[i];

			Float32 ca = kCa[i];

			Float32 lb = is[li] * cs - is[ui] * ca;

			Float32 ub = is[ui] * cs + is[li] * ca;

			is[li] = lb;

			is[ui] = ub;
		}
	}
}

void OpenMP3::HybridSynthesis(FrameData::Granule & granule, Float32 store[32][18])
{
	auto & is = granule.is;

	bool window_switching = granule.window_switching;

	UInt block_type = granule.block_type;

	bool mixed_block = granule.mixed_block;

	Float32 rawout[36];

	for (UInt sb = 0; sb < 32; sb++) //Loop through all 32 subbands
	{
		UInt blocktype = ((window_switching == 1) && mixed_block && (sb < 2)) ? 0 : block_type;

		IMDCT_Win(blocktype, is + (sb * 18), rawout);	//inverse modified DCT and windowing

		for (UInt i = 0; i < 18; i++)	//Overlapp add with stored vector into main_data vector
		{
			is[sb * 18 + i] = rawout[i] + store[sb][i];

			store[sb][i] = rawout[i + 18];
		}
	}
}

FORCEINLINE void OpenMP3::FrequencyInversion(Float32 is[576])
{
	for (UInt sb = 1; sb < 32; sb += 2) for (UInt i = 1; i < 18; i += 2) is[sb * 18 + i] = -is[sb * 18 + i];
}

void OpenMP3::SubbandSynthesis(const FrameData & data, const Float32 is[576], Float32 v_vec[1024], Float32 out[576])
{
	static float sbs_n_win[64][32];

	static bool init = true;

	if (init)
	{
		for (UInt i = 0; i < 64; i++) for (UInt j = 0; j < 32; j++) sbs_n_win[i][j] = Float32(cos(Float64((16 + i) * (2 * j + 1)) * (C_PI / 64.0)));

		init = false;
	}

	Float32 u_vec[512], s_vec[32];

	for (UInt ss = 0; ss < 18; ss++)  //Loop through 18 samples in 32 subbands
	{
		for (UInt i = 1023; i > 63; i--)  v_vec[i] = v_vec[i - 64];	//Shift up the V vector 

		for (UInt i = 0; i < 32; i++) s_vec[i] = is[i * 18 + ss]; //Copy next 32 time samples to a temp vector

		for (UInt i = 0; i < 64; i++) //Matrix multiply input with n_win[][] matrix
		{ 
			Float32 sum = 0.0;

			for (UInt j = 0; j < 32; j++) sum += sbs_n_win[i][j] * s_vec[j];

			v_vec[i] = sum;
		}

		for (UInt i = 0; i < 8; i++)	//Build the U vector
		{ 
			for (UInt j = 0; j < 32; j++) // <<7 == *128
			{ 
				UInt i6 = i << 6;

				UInt i7 = i << 7;

				u_vec[i6 + j] = v_vec[i7 + j];

				u_vec[i6 + j + 32] = v_vec[i7 + j + 96];
			}
		}

		for (UInt i = 0; i < 512; i++) u_vec[i] *= kSynthDtbl[i];	//Window by u_vec[i] with kSynthDtbl[i]

		for (UInt i = 0; i < 32; i++)
		{
			Float32 sum = 0.0;

			for (UInt j = 0; j < 16; j++) sum += u_vec[(j << 5) + i];	//sum += u_vec[j*32 + i];

			out[(32 * ss) + i] = sum;
		}
	}
}

//Does inverse modified DCT and windowing
void OpenMP3::IMDCT_Win(UInt blocktype, const Float32 in[18], Float32 out[36])
{
	static Float32 imdct_win[4][36];

	static Float32 cos_n12[6][12];

	static Float32 cos_n36[18][36];

	static bool init = true;

	if (init)
	{ 
		for (UInt i = 0; i < 36; i++)  imdct_win[0][i] = Float32(sin((C_PI / 36.0) * (i + 0.5))); //0
		for (UInt i = 0; i < 18; i++)  imdct_win[1][i] = Float32(sin((C_PI / 36.0) * (i + 0.5))); //1
		for (UInt i = 18; i < 24; i++) imdct_win[1][i] = 1.0f;
		for (UInt i = 24; i < 30; i++) imdct_win[1][i] = Float32(sin((C_PI / 12.0) * (i + 0.5 - 18.0)));
		for (UInt i = 30; i < 36; i++) imdct_win[1][i] = 0.0f;
		for (UInt i = 0; i < 12; i++)  imdct_win[2][i] = Float32(sin((C_PI / 12.0) * (i + 0.5))); //2
		for (UInt i = 12; i < 36; i++) imdct_win[2][i] = 0.0f;
		for (UInt i = 0; i < 6; i++)   imdct_win[3][i] = 0.0f; //3
		for (UInt i = 6; i < 12; i++)  imdct_win[3][i] = Float32(sin((C_PI / 12.0) * (i + 0.5 - 6.0)));
		for (UInt i = 12; i < 18; i++) imdct_win[3][i] = 1.0f;
		for (UInt i = 18; i < 36; i++) imdct_win[3][i] = Float32(sin((C_PI / 36.0) * (i + 0.5)));

		for (UInt p = 0; p < 12; p++) for (UInt m = 0; m < 6; m++) cos_n12[m][p] = Float32(cos(C_PI / 24 * (2 * p + 1 + 6) * (2 * m + 1)));

		for (UInt p = 0; p < 36; p++) for (UInt m = 0; m < 18; m++)	cos_n36[m][p] = Float32(cos(C_PI / 72 * (2 * p + 1 + 18) * (2 * m + 1)));

		init = false;
	}

	//MemClear(out, sizeof(Float32) * 36);

	for (UInt i = 0; i < 36; i++) out[i] = 0.0;

	const float * blocktype_imdct_win = imdct_win[blocktype];

	if (blocktype == 2)	//3 short blocks, N = 12
	{
		const float * tin = in;
		
		for (UInt i = 0; i < 3; i++)
		{
			for (UInt p = 0; p < 12; p++)
			{
				Float32 sum = 0.0f;

				for (UInt m = 0; m < 6; m++)		//N / 2
				{
					//sum += tin[i + 3 * m] * cos(C_PI / 24 * (2 * p + 1 + 6) * (2 * m + 1));

					sum += tin[i + 3 * m] * cos_n12[m][p];
				}

				out[6 * i + p + 6] += Float32(sum) * blocktype_imdct_win[p];
			}
		}
	}
	else
	{
		//block_type != 2, N = 36

		for (UInt p = 0; p < 36; p++)
		{
			Float32 sum = 0.0f;

			for (UInt m = 0; m < 18; m++)	//N / 2
			{
				//sum += in[m] * cos(C_PI / 72 * (2 * p + 1 + 18) * (2 * m + 1));

				sum += in[m] * cos_n36[m][p];
			}

			out[p] = Float32(sum) * blocktype_imdct_win[p];
		}
	}
}




//
//data

const float OpenMP3::kCS[8] = { 0.857493f, 0.881742f, 0.949629f, 0.983315f, 0.995518f, 0.999161f, 0.999899f, 0.999993f };

const float OpenMP3::kCa[8] = { -0.514496f,-0.471732f,-0.313377f,-0.181913f,-0.094574f,-0.040966f,-0.014199f,-0.003700f };

const float OpenMP3::kSynthDtbl[512] =
{
	0.000000000f,-0.000015259f,-0.000015259f,-0.000015259f,
	-0.000015259f,-0.000015259f,-0.000015259f,-0.000030518f,
	-0.000030518f,-0.000030518f,-0.000030518f,-0.000045776f,
	-0.000045776f,-0.000061035f,-0.000061035f,-0.000076294f,
	-0.000076294f,-0.000091553f,-0.000106812f,-0.000106812f,
	-0.000122070f,-0.000137329f,-0.000152588f,-0.000167847f,
	-0.000198364f,-0.000213623f,-0.000244141f,-0.000259399f,
	-0.000289917f,-0.000320435f,-0.000366211f,-0.000396729f,
	-0.000442505f,-0.000473022f,-0.000534058f,-0.000579834f,
	-0.000625610f,-0.000686646f,-0.000747681f,-0.000808716f,
	-0.000885010f,-0.000961304f,-0.001037598f,-0.001113892f,
	-0.001205444f,-0.001296997f,-0.001388550f,-0.001480103f,
	-0.001586914f,-0.001693726f,-0.001785278f,-0.001907349f,
	-0.002014160f,-0.002120972f,-0.002243042f,-0.002349854f,
	-0.002456665f,-0.002578735f,-0.002685547f,-0.002792358f,
	-0.002899170f,-0.002990723f,-0.003082275f,-0.003173828f,
	0.003250122f, 0.003326416f, 0.003387451f, 0.003433228f,
	0.003463745f, 0.003479004f, 0.003479004f, 0.003463745f,
	0.003417969f, 0.003372192f, 0.003280640f, 0.003173828f,
	0.003051758f, 0.002883911f, 0.002700806f, 0.002487183f,
	0.002227783f, 0.001937866f, 0.001617432f, 0.001266479f,
	0.000869751f, 0.000442505f,-0.000030518f,-0.000549316f,
	-0.001098633f,-0.001693726f,-0.002334595f,-0.003005981f,
	-0.003723145f,-0.004486084f,-0.005294800f,-0.006118774f,
	-0.007003784f,-0.007919312f,-0.008865356f,-0.009841919f,
	-0.010848999f,-0.011886597f,-0.012939453f,-0.014022827f,
	-0.015121460f,-0.016235352f,-0.017349243f,-0.018463135f,
	-0.019577026f,-0.020690918f,-0.021789551f,-0.022857666f,
	-0.023910522f,-0.024932861f,-0.025909424f,-0.026840210f,
	-0.027725220f,-0.028533936f,-0.029281616f,-0.029937744f,
	-0.030532837f,-0.031005859f,-0.031387329f,-0.031661987f,
	-0.031814575f,-0.031845093f,-0.031738281f,-0.031478882f,
	0.031082153f, 0.030517578f, 0.029785156f, 0.028884888f,
	0.027801514f, 0.026535034f, 0.025085449f, 0.023422241f,
	0.021575928f, 0.019531250f, 0.017257690f, 0.014801025f,
	0.012115479f, 0.009231567f, 0.006134033f, 0.002822876f,
	-0.000686646f,-0.004394531f,-0.008316040f,-0.012420654f,
	-0.016708374f,-0.021179199f,-0.025817871f,-0.030609131f,
	-0.035552979f,-0.040634155f,-0.045837402f,-0.051132202f,
	-0.056533813f,-0.061996460f,-0.067520142f,-0.073059082f,
	-0.078628540f,-0.084182739f,-0.089706421f,-0.095169067f,
	-0.100540161f,-0.105819702f,-0.110946655f,-0.115921021f,
	-0.120697021f,-0.125259399f,-0.129562378f,-0.133590698f,
	-0.137298584f,-0.140670776f,-0.143676758f,-0.146255493f,
	-0.148422241f,-0.150115967f,-0.151306152f,-0.151962280f,
	-0.152069092f,-0.151596069f,-0.150497437f,-0.148773193f,
	-0.146362305f,-0.143264771f,-0.139450073f,-0.134887695f,
	-0.129577637f,-0.123474121f,-0.116577148f,-0.108856201f,
	0.100311279f, 0.090927124f, 0.080688477f, 0.069595337f,
	0.057617188f, 0.044784546f, 0.031082153f, 0.016510010f,
	0.001068115f,-0.015228271f,-0.032379150f,-0.050354004f,
	-0.069168091f,-0.088775635f,-0.109161377f,-0.130310059f,
	-0.152206421f,-0.174789429f,-0.198059082f,-0.221984863f,
	-0.246505737f,-0.271591187f,-0.297210693f,-0.323318481f,
	-0.349868774f,-0.376800537f,-0.404083252f,-0.431655884f,
	-0.459472656f,-0.487472534f,-0.515609741f,-0.543823242f,
	-0.572036743f,-0.600219727f,-0.628295898f,-0.656219482f,
	-0.683914185f,-0.711318970f,-0.738372803f,-0.765029907f,
	-0.791213989f,-0.816864014f,-0.841949463f,-0.866363525f,
	-0.890090942f,-0.913055420f,-0.935195923f,-0.956481934f,
	-0.976852417f,-0.996246338f,-1.014617920f,-1.031936646f,
	-1.048156738f,-1.063217163f,-1.077117920f,-1.089782715f,
	-1.101211548f,-1.111373901f,-1.120223999f,-1.127746582f,
	-1.133926392f,-1.138763428f,-1.142211914f,-1.144287109f,
	1.144989014f, 1.144287109f, 1.142211914f, 1.138763428f,
	1.133926392f, 1.127746582f, 1.120223999f, 1.111373901f,
	1.101211548f, 1.089782715f, 1.077117920f, 1.063217163f,
	1.048156738f, 1.031936646f, 1.014617920f, 0.996246338f,
	0.976852417f, 0.956481934f, 0.935195923f, 0.913055420f,
	0.890090942f, 0.866363525f, 0.841949463f, 0.816864014f,
	0.791213989f, 0.765029907f, 0.738372803f, 0.711318970f,
	0.683914185f, 0.656219482f, 0.628295898f, 0.600219727f,
	0.572036743f, 0.543823242f, 0.515609741f, 0.487472534f,
	0.459472656f, 0.431655884f, 0.404083252f, 0.376800537f,
	0.349868774f, 0.323318481f, 0.297210693f, 0.271591187f,
	0.246505737f, 0.221984863f, 0.198059082f, 0.174789429f,
	0.152206421f, 0.130310059f, 0.109161377f, 0.088775635f,
	0.069168091f, 0.050354004f, 0.032379150f, 0.015228271f,
	-0.001068115f,-0.016510010f,-0.031082153f,-0.044784546f,
	-0.057617188f,-0.069595337f,-0.080688477f,-0.090927124f,
	0.100311279f, 0.108856201f, 0.116577148f, 0.123474121f,
	0.129577637f, 0.134887695f, 0.139450073f, 0.143264771f,
	0.146362305f, 0.148773193f, 0.150497437f, 0.151596069f,
	0.152069092f, 0.151962280f, 0.151306152f, 0.150115967f,
	0.148422241f, 0.146255493f, 0.143676758f, 0.140670776f,
	0.137298584f, 0.133590698f, 0.129562378f, 0.125259399f,
	0.120697021f, 0.115921021f, 0.110946655f, 0.105819702f,
	0.100540161f, 0.095169067f, 0.089706421f, 0.084182739f,
	0.078628540f, 0.073059082f, 0.067520142f, 0.061996460f,
	0.056533813f, 0.051132202f, 0.045837402f, 0.040634155f,
	0.035552979f, 0.030609131f, 0.025817871f, 0.021179199f,
	0.016708374f, 0.012420654f, 0.008316040f, 0.004394531f,
	0.000686646f,-0.002822876f,-0.006134033f,-0.009231567f,
	-0.012115479f,-0.014801025f,-0.017257690f,-0.019531250f,
	-0.021575928f,-0.023422241f,-0.025085449f,-0.026535034f,
	-0.027801514f,-0.028884888f,-0.029785156f,-0.030517578f,
	0.031082153f, 0.031478882f, 0.031738281f, 0.031845093f,
	0.031814575f, 0.031661987f, 0.031387329f, 0.031005859f,
	0.030532837f, 0.029937744f, 0.029281616f, 0.028533936f,
	0.027725220f, 0.026840210f, 0.025909424f, 0.024932861f,
	0.023910522f, 0.022857666f, 0.021789551f, 0.020690918f,
	0.019577026f, 0.018463135f, 0.017349243f, 0.016235352f,
	0.015121460f, 0.014022827f, 0.012939453f, 0.011886597f,
	0.010848999f, 0.009841919f, 0.008865356f, 0.007919312f,
	0.007003784f, 0.006118774f, 0.005294800f, 0.004486084f,
	0.003723145f, 0.003005981f, 0.002334595f, 0.001693726f,
	0.001098633f, 0.000549316f, 0.000030518f,-0.000442505f,
	-0.000869751f,-0.001266479f,-0.001617432f,-0.001937866f,
	-0.002227783f,-0.002487183f,-0.002700806f,-0.002883911f,
	-0.003051758f,-0.003173828f,-0.003280640f,-0.003372192f,
	-0.003417969f,-0.003463745f,-0.003479004f,-0.003479004f,
	-0.003463745f,-0.003433228f,-0.003387451f,-0.003326416f,
	0.003250122f, 0.003173828f, 0.003082275f, 0.002990723f,
	0.002899170f, 0.002792358f, 0.002685547f, 0.002578735f,
	0.002456665f, 0.002349854f, 0.002243042f, 0.002120972f,
	0.002014160f, 0.001907349f, 0.001785278f, 0.001693726f,
	0.001586914f, 0.001480103f, 0.001388550f, 0.001296997f,
	0.001205444f, 0.001113892f, 0.001037598f, 0.000961304f,
	0.000885010f, 0.000808716f, 0.000747681f, 0.000686646f,
	0.000625610f, 0.000579834f, 0.000534058f, 0.000473022f,
	0.000442505f, 0.000396729f, 0.000366211f, 0.000320435f,
	0.000289917f, 0.000259399f, 0.000244141f, 0.000213623f,
	0.000198364f, 0.000167847f, 0.000152588f, 0.000137329f,
	0.000122070f, 0.000106812f, 0.000106812f, 0.000091553f,
	0.000076294f, 0.000076294f, 0.000061035f, 0.000061035f,
	0.000045776f, 0.000045776f, 0.000030518f, 0.000030518f,
	0.000030518f, 0.000030518f, 0.000015259f, 0.000015259f,
	0.000015259f, 0.000015259f, 0.000015259f, 0.000015259f,
};
